---
import ReleasesLayout from "../../layouts/ReleasesLayout.astro";
import { getPublishedReleases } from "../../utils/releases";
import { ChevronLeft, ChevronRight } from "lucide-react";
import { YouTubeEmbed } from "../../components/YouTubeEmbed";

export async function getStaticPaths() {
  const releases = await getPublishedReleases();
  return releases.map((entry, i) => ({
    params: { slug: entry.slug },
    props: {
      entry,
      prev: i < releases.length - 1 ? releases[i + 1] : null,
      next: i > 0 ? releases[i - 1] : null,
    },
  }));
}

const { entry, prev, next } = Astro.props;
const { Content } = await entry.render();

const formatDate = (date) => {
  return new Date(date).toLocaleDateString("en-US", {
    year: "numeric",
    month: "long",
    day: "numeric",
  });
};

const jsonLd = JSON.stringify({
  "@context": "https://schema.org",
  "@type": "TechArticle",
  headline: entry.data.title,
  datePublished: entry.data.date.toISOString(),
  author: {
    "@type": "Organization",
    name: "Operately",
  },
  publisher: {
    "@type": "Organization",
    name: "Operately",
    logo: {
      "@type": "ImageObject",
      url: new URL("/images/social/card-summary.png", Astro.site),
    },
  },
  description: entry.data.description,
});
---

<ReleasesLayout
  title={entry.data.title}
  description={entry.data.description}
  youtubeId={entry.data.youtubeId}
>
  <Fragment slot="head-releases">
    <meta name="author" content="Operately Team" />
    <meta name="date" content={entry.data.date.toISOString()} />
    <script type="application/ld+json" set:html={jsonLd} />
  </Fragment>

  <article>
    <p class="font-bold text-lg">Operately v{entry.data.version}</p>
    <div class="border-b-4 border-yellow-300 w-8 mb-8 mt-2"></div>
    <h1 class="text-4xl font-extrabold mb-2 leading-snug">
      {entry.data.title}
    </h1>

    <p class="text-gray-500 mb-8 text-sm">
      <time itemprop="datePublished" datetime={entry.data.date.toISOString()}>
        {formatDate(entry.data.date)}
      </time>
    </p>
    <div class="prose max-w-none text-lg">
      {
        entry.data.youtubeId && (
          <div class="mb-8">
            <YouTubeEmbed id={entry.data.youtubeId} showControls={true} />
          </div>
        )
      }
      <Content />
    </div>
  </article>

  <nav
    class="mt-12 flex justify-between items-center border-t border-gray-200 pt-6"
  >
    {
      prev && (
        <a
          href={`/releases/${prev.slug}`}
          class="flex items-center text-operately-blue "
        >
          <ChevronLeft className="h-5 w-5 mr-1" />
          <span>
            <div class="text-sm text-gray-500">Previous release</div>
            <div class="hover:underline">
              {prev.data.title} - v{prev.data.version}
            </div>
          </span>
        </a>
      )
    }
    {!prev && <div />}
    {
      next && (
        <a
          href={`/releases/${next.slug}`}
          class="flex items-center text-operately-blue text-right"
        >
          <span>
            <div class="text-sm text-gray-500">Next release</div>
            <div class="hover:underline">
              {next.data.title} - v{next.data.version}
            </div>
          </span>
          <ChevronRight className="h-5 w-5 ml-1" />
        </a>
      )
    }
  </nav>
</ReleasesLayout>
